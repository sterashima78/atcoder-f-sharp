{
  // Place your atcoder-f-sharp ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Read Int": {
    "prefix": "read int",
    "body": ["let readInt _ = stdin.ReadLine() |> int"],
    "description": "Read Int from stdin"
  },
  "Read Int Array": {
    "prefix": "read int array",
    "body": [
      "let readIntArray _ = stdin.ReadLine().Split(\" \") |> Array.map int"
    ],
    "description": "Read Int Array from stdin"
  },
  "Read Float Array": {
    "prefix": "read float array",
    "body": [
      "let readFloatArray _ = stdin.ReadLine().Split(\" \") |> Array.map float"
    ],
    "description": "Read Int Array from stdin"
  },
  "Read Decimal Array": {
    "prefix": "read decimal array",
    "body": [
      "let readDecimalArray _ = stdin.ReadLine().Split(\" \") |> Array.map decimal"
    ],
    "description": "Read Int Array from stdin"
  },
  "Read Char Array": {
    "prefix": "read char",
    "body": ["let readCharArray _ = stdin.ReadLine().ToCharArray()"],
    "description": "Read Int Array from stdin"
  },
  "Choice by boolean": {
    "prefix": "choice by boolean",
    "body": ["let choice ok ng bool = if bool then ok else ng"]
  },
  "Mod pown": {
    "prefix": "mod pown",
    "body": [
      "let modPown m x y =",
      "    seq { 1 .. y }",
      "    |> Seq.fold (fun a _ -> a * x % m) 1L"
    ]
  },
  "Mod add": {
    "prefix": "mod add",
    "body": ["let modadd m x y = (x + y) % m"]
  },
  "Mod sub": {
    "prefix": "mod sub",
    "body": ["let modsub m x y = (x + m - y) % m"]
  },
  "Mod mul": {
    "prefix": "mod mul",
    "body": ["let modmul m x y = ((x % m) * (y % m)) % m"]
  },
  "IsSquare": {
    "prefix": "is square",
    "body": [
      "let isSquare x = x |> float |> System.Math.Sqrt |> int |> pown <| 2 |> (=) x"
    ]
  },
  "Uniq Array": {
    "prefix": "uniq array",
    "body": ["let uniqArray x = x |> Array.groupBy id |> Array.map fst"]
  },
  "Create Dictionary": {
    "prefix": "create dict",
    "body": ["let createDict _ = new System.Collections.Generic.Dictionary<>()"]
  },
  "isPrime": {
    "prefix": "is prime",
    "body": [
      "let isPrime n =",
      "  if n = 1L then",
      "      true",
      "  else",
      "      seq { 2L .. n }",
      "      |> Seq.filter (fun a -> a * a <= n)",
      "      |> Seq.exists (fun x -> n % x = 0L)",
      "      |> not"
    ]
  },
  "toDivisors": {
    "prefix": "to divisors",
    "body": [
      "let toDivisors n =",
      "    seq { 2 .. n }",
      "    |> Seq.filter (fun a -> a * a <= n)",
      "    |> Seq.collect (fun x ->",
      "        if n % x = 0 && x * x <> n then",
      "            seq { x; (n/x) }",
      "        elif n % x = 0 then",
      "            seq { x }",
      "        else",
      "            Seq.empty)"
    ]
  },
  "GCD": {
    "prefix": "gcd",
    "body": ["let rec gcd a b = if b = 0L then a else gcd b (a % b)"]
  },
  "LCM": {
    "prefix": "lcm",
    "body": [
      "let rec gcd a b = if b = 0L then a else gcd b (a % b)",
      "let lcm a b = a |> (/) <| gcd a b |> (*) b"
    ]
  },
  "Permutation": {
    "prefix": "permutaion",
    "body": [
      "let toPermutation (list: 'a list): 'a list list =",
      "  let difference xs ys =",
      "      let ys = Set.ofList ys",
      "      xs |> List.filter (ys.Contains >> not)",
      "",
      "  let rec permutation (rest: 'a list) (current: 'a list) (answers: 'a list list) =",
      "      match rest with",
      "      | [] -> current :: answers",
      "      | rest -> List.foldBack (fun x state -> permutation (difference rest [ x ]) (x :: current) state) rest answers",
      "",
      "  permutation list [] []"
    ]
  },
  "Create Bit Seq": {
    "prefix": "create bit seq",
    "body": [
      "let createBitSeq n = { 1 .. pown 2 n - 1 } |> Seq.map (fun x -> System.Convert.ToString(x, 2))"
    ]
  },
  "Select By Bit": {
    "prefix": "select by bit",
    "body": [
      "let selectByBit (arr: 'a []) (str: string) = str.ToCharArray() |> Array.rev |> Array.mapi (fun index v -> if v = '1' then Some(arr.[index]) else None) |> Array.choose id"
    ]
  }
}
